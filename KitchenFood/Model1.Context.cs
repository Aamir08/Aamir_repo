//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KitchenFood
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class kitchenDBContext : DbContext
    {
        public kitchenDBContext()
            : base("name=kitchenDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tblUser> tblUsers { get; set; }
        public DbSet<tblFoodList> tblFoodLists { get; set; }
        public DbSet<tblOrderHistory> tblOrderHistories { get; set; }
        public DbSet<tblCart> tblCarts { get; set; }
    
        public virtual int usp_OrderHistory(Nullable<int> newUserid)
        {
            var newUseridParameter = newUserid.HasValue ?
                new ObjectParameter("NewUserid", newUserid) :
                new ObjectParameter("NewUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderHistory", newUseridParameter);
        }
    
        public virtual int usp_Admin_insert_food(string fdName, string fdIngredients, string fdCategory, Nullable<int> fdPrice)
        {
            var fdNameParameter = fdName != null ?
                new ObjectParameter("FdName", fdName) :
                new ObjectParameter("FdName", typeof(string));
    
            var fdIngredientsParameter = fdIngredients != null ?
                new ObjectParameter("FdIngredients", fdIngredients) :
                new ObjectParameter("FdIngredients", typeof(string));
    
            var fdCategoryParameter = fdCategory != null ?
                new ObjectParameter("FdCategory", fdCategory) :
                new ObjectParameter("FdCategory", typeof(string));
    
            var fdPriceParameter = fdPrice.HasValue ?
                new ObjectParameter("FdPrice", fdPrice) :
                new ObjectParameter("FdPrice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Admin_insert_food", fdNameParameter, fdIngredientsParameter, fdCategoryParameter, fdPriceParameter);
        }
    }
}
